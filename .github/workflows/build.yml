name: Build Cross-Platform Binaries

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  BINARY_NAME: okaproxy
  GO_VERSION: 1.23

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-13, windows-2022]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Get dependencies
      run: go mod download

    - name: Set version info
      shell: bash
      run: |
        echo "VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "v1.0.0")" >> $GITHUB_ENV
        echo "BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%S%z)" >> $GITHUB_ENV
        echo "GIT_COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")" >> $GITHUB_ENV

    - name: Build for Linux (Debian 13) with static linking
      if: matrix.os == 'ubuntu-24.04'
      run: |
        mkdir -p dist
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags "-X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT} -extldflags '-static' -w -s" -o dist/${BINARY_NAME}-linux-amd64 .
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -a -ldflags "-X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT} -extldflags '-static' -w -s" -o dist/${BINARY_NAME}-linux-arm64 .

    - name: Build for macOS
      if: matrix.os == 'macos-13'
      run: |
        mkdir -p dist
        GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT} -w -s" -o dist/${BINARY_NAME}-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT} -w -s" -o dist/${BINARY_NAME}-darwin-arm64 .

    - name: Build for Windows
      if: matrix.os == 'windows-2022'
      shell: bash
      run: |
        mkdir -p dist
        GOOS=windows GOARCH=amd64 go build -ldflags "-X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT} -w -s" -o dist/${BINARY_NAME}-windows-amd64.exe .

    - name: List dist contents
      run: ls -la dist/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.os }}
        path: dist/

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-24.04
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true

    - name: Organize binaries
      run: |
        mkdir -p dist
        find artifacts -type f -name "${BINARY_NAME}-*" -exec cp {} dist/ \;
        ls -la dist/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/${BINARY_NAME}-linux-amd64
          dist/${BINARY_NAME}-linux-arm64
          dist/${BINARY_NAME}-darwin-amd64
          dist/${BINARY_NAME}-darwin-arm64
          dist/${BINARY_NAME}-windows-amd64.exe
        draft: false
        prerelease: false