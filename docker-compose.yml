version: '3.8'

services:
  okaproxy:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: okaproxy
    ports:
      - "3000:3000"      # Primary proxy port
      - "3443:3443"      # HTTPS proxy port (if enabled)
      - "3001:3001"      # Additional proxy ports as needed
      - "3002:3002"
    volumes:
      - ./config.toml:/app/config.toml:ro
      - ./logs:/app/logs
      - ./public:/app/public:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro  # For HTTPS certificates
    environment:
      - GIN_MODE=release
      - TZ=UTC
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - okaproxy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: okaproxy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - okaproxy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Optional: Nginx as a reverse proxy (recommended for production)
  nginx:
    image: nginx:alpine
    container_name: okaproxy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /etc/ssl/private:/etc/ssl/private:ro
    restart: unless-stopped
    depends_on:
      - okaproxy
    networks:
      - okaproxy-network
    profiles:
      - production  # Only start nginx in production profile

volumes:
  redis-data:
    driver: local

networks:
  okaproxy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Usage:
# 
# Development:
#   docker-compose up -d
#
# Production (with nginx):
#   docker-compose --profile production up -d
#
# View logs:
#   docker-compose logs -f okaproxy
#
# Restart services:
#   docker-compose restart
#
# Stop and remove:
#   docker-compose down
#
# Update and restart:
#   docker-compose pull && docker-compose up -d